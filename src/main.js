// Generated by CoffeeScript 1.12.7
var bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

define(['base/js/namespace', 'jquery', 'ansi_up', 'promise', 'vendors/dotimeout', 'notebook/js/notebook', 'vendors/contents', 'base/js/events', 'services/kernels/kernel', 'codemirror/lib/codemirror', 'codemirror/mode/python/python', 'codemirror/mode/r/r', 'codemirror/mode/julia/julia', 'codemirror/mode/htmlmixed/htmlmixed', 'codemirror/mode/css/css', 'codemirror/mode/javascript/javascript', 'codemirror/mode/shell/shell'], function(IPython, $, ansi_up, promise, doTimeout, notebook, contents, events, kernel, CodeMirror) {
  var Amalthea;
  promise.polyfill();
  Amalthea = (function() {
    Amalthea.prototype.default_options = {
      selector: 'pre[data-executable]',
      url: 'https://amalthea.jizhi.im:8000/',
      tmpnb_mode: true,
      kernel_name: "python2",
      append_kernel_controls_to: false,
      next_cell_shortcut: 32,
      run_cell_shortcut: 13,
      not_executable_selector: "pre[data-not-executable]",
      read_only_selector: "pre[data-read-only]",
      error_addendum: true,
      add_interrupt_button: false,
      codemirror_mode_name: "ipython",
      codemirror_theme_name: "default",
      container_selector: "body",
      image_name: "jupyter/notebook",
      debug: false
    };

    Amalthea.prototype.spawn_path = "api/spawn/";

    Amalthea.prototype.stats_path = "api/stats";

    Amalthea.prototype.start_state = "start";

    Amalthea.prototype.idle_state = "idle";

    Amalthea.prototype.busy_state = "busy";

    Amalthea.prototype.ran_state = "ran";

    Amalthea.prototype.full_state = "full";

    Amalthea.prototype.cant_state = "cant";

    Amalthea.prototype.disc_state = "disconnected";

    Amalthea.prototype.gaveup_state = "gaveup";

    Amalthea.prototype.user_error = "user_error";

    Amalthea.prototype.interrupt_state = "interrupt";

    Amalthea.prototype.ui = {};

    Amalthea.prototype.not_execute = [];

    Amalthea.prototype.typing = [];

    Amalthea.prototype.handler = {};

    Amalthea.prototype.options = {};

    Amalthea.prototype.setup_constants = function() {
      this.error_states = [this.disc_state, this.full_state, this.cant_state, this.gaveup_state];
      this.ui[this.start_state] = '启动中';
      this.ui[this.idle_state] = '运行';
      this.ui[this.busy_state] = '运行中<svg version="1.1" class="amalthea-running" xmlns="http://www.w3.org/2000/svg" viewBox="-60 -60 98 42"><path class="cls-0" d="M0.2-32.9c19.4,0,36.3,7,45.1,17.4c-8.7-24.9-35.9-38-60.8-29.3C-29.3-40-40.1-29.2-44.9-15.5 C-36.1-25.9-19.2-32.9,0.2-32.9"/><path class="cls-1" d="M42.2-52c0.1,4.9-3.7,8.9-8.5,9.1c-4.9,0.1-8.9-3.7-9.1-8.5c-0.1-4.8,3.6-8.8,8.4-9.1c4.9-0.2,9,3.5,9.2,8.4 C42.2-52.1,42.2-52.1,42.2-52"/><path class="cls-2" d="M-41.1-37c-3.6,0.2-6.6-2.6-6.8-6.1s2.6-6.6,6.1-6.8c3.6-0.2,6.6,2.6,6.8,6.1c0,0,0,0,0,0v0.1 C-34.8-40.2-37.6-37.2-41.1-37C-41.1-37-41.1-37-41.1-37L-41.1-37L-41.1-37z"/><path class="cls-3" d="M-2.2-65.3C-2-59-6.9-53.7-13.3-53.5s-11.6-4.7-11.8-11.1c-0.2-6.3,4.7-11.5,10.9-11.8 c6.3-0.3,11.7,4.6,11.9,10.9C-2.2-65.4-2.2-65.3-2.2-65.3"/></svg>';
      this.ui[this.ran_state] = '再次运行';
      this.ui[this.user_error] = '再次运行';
      this.ui[this.interrupt_state] = '连接中断';
      this.ui[this.full_state] = '服务器忙';
      this.ui[this.cant_state] = '连接失败';
      this.ui[this.disc_state] = '重连中';
      this.ui[this.gaveup_state] = '重新运行';
      if (this.options.error_addendum === false) {
        return this.ui['error_addendum'] = "";
      } else if (this.options.error_addendum === true) {
        return this.ui['error_addendum'] = "<button data-action='run-above'>全部运行</button> <div class='amalthea-message'>看上去出现了一些错误，您可能需要运行之前的所有程序。</div>";
      } else {
        return this.ui['error_addendum'] = this.options.error_addendum;
      }
    };

    function Amalthea(options) {
      var qs_tmpnb, qs_url, ref, ref1;
      if (options == null) {
        options = {};
      }
      this.track = bind(this.track, this);
      this.destroy = bind(this.destroy, this);
      this.start_notebook = bind(this.start_notebook, this);
      this.start_kernel = bind(this.start_kernel, this);
      this.copycode = bind(this.copycode, this);
      this.resetcode = bind(this.resetcode, this);
      this.showhint = bind(this.showhint, this);
      this.before_first_run = bind(this.before_first_run, this);
      this.show_message = bind(this.show_message, this);
      this.run_cell = bind(this.run_cell, this);
      this.get_controls_html = bind(this.get_controls_html, this);
      this.controls_html_quiz = bind(this.controls_html_quiz, this);
      this.controls_html = bind(this.controls_html, this);
      this.show_cell_state = bind(this.show_cell_state, this);
      this.set_state = bind(this.set_state, this);
      this.autorun = bind(this.autorun, this);
      this.build_amalthea = bind(this.build_amalthea, this);
      this.spawn_handler = bind(this.spawn_handler, this);
      this.call_spawn = bind(this.call_spawn, this);
      this.options = options;
      this.has_kernel_connected = false;
      this.server_error = false;
      ref = _.defaults(this.options, this.default_options), this.selector = ref.selector, this.url = ref.url, this.debug = ref.debug;
      this.setup_constants();
      ref1 = [this.get_param_from_qs('url'), this.get_param_from_qs('tmpnb_mode')], qs_url = ref1[0], qs_tmpnb = ref1[1];
      if (qs_url) {
        this.url = qs_url;
      }
      if (qs_tmpnb === 'true') {
        this.options.tmpnb_mode = true;
      }
      if (qs_tmpnb === 'false') {
        this.options.tmpnb_mode = false;
      }
      if (this.url) {
        this.url = this.url.replace(/\/?$/, '/');
      }
      if (this.url.slice(0, 2) === '//') {
        this.url = window.location.protocol + this.url;
      }
      if (this.options.tmpnb_mode) {
        this.log('Amalthea is in tmpnb mode');
        this.tmpnb_url = this.url;
        this.url = '';
      }
      this.cells = [];
      this.events = events;
      this.setup_user_events();
      this.handler = this.options.handler;
      if (this.handler) {
        this.handler.running = true;
        this.handler.node.addEventListener('refresh', (function(_this) {
          return function() {
            return _this.build_amalthea(1);
          };
        })(this));
        this.handler.node.addEventListener('add', (function(_this) {
          return function() {
            return _this.build_amalthea(2);
          };
        })(this));
      }
      this.start_notebook();
    }

    Amalthea.prototype.call_spawn = function(cell, cb) {
      var invo, payload, ref;
      this.log('call spawn');
      this.track('call_spawn');
      if ((ref = this.kernel) != null ? ref.ws : void 0) {
        this.log('HAZ WEBSOCKET?');
      }
      invo = new XMLHttpRequest;
      invo.open('POST', this.tmpnb_url + this.spawn_path, true);
      payload = JSON.stringify({
        image_name: this.options.image_name
      });
      invo.onreadystatechange = (function(_this) {
        return function(e) {
          if (invo.readyState === 4) {
            return _this.spawn_handler(cell, e, cb);
          }
        };
      })(this);
      invo.onerror = (function(_this) {
        return function(e) {
          _this.log("Cannot connect to tmpnb server", true);
          _this.set_state(_this.cant_state);
          return _this.track('call_spawn_fail');
        };
      })(this);
      return invo.send(payload);
    };

    Amalthea.prototype.spawn_handler = function(cell, e, cb) {
      var data, fullURL, ref;
      this.log('spawn handler called');
      if ((ref = e.target.status) === 0 || ref === 405) {
        this.log('Cannot connect to tmpnb server, status: ' + e.target.status, true);
        return this.set_state(this.cant_state);
      } else {
        try {
          data = JSON.parse(e.target.responseText);
        } catch (error) {
          this.log(data);
          this.log("Couldn't parse spawn response");
          this.track('call_spawn_error');
        }
        if (data.status === 'full') {
          this.log('tmpnb server full', true);
          this.set_state(this.full_state);
          return this.track('call_spawn_full');
        } else {
          fullURL = data.url.match(/(https?:\/\/.[^\/]+)(.*)/i);
          if (fullURL) {
            this.tmpnb_url = fullURL[1];
            data.url = fullURL[2];
          }
          this.url = this.tmpnb_url + data.url + '/';
          this.log('tmpnb says we should use');
          this.log(this.url);
          this.start_kernel(cell, cb);
          return this.track('call_spawn_success');
        }
      }
    };

    Amalthea.prototype.build_amalthea = function(action) {
      var focus_edit_flag, get_cell_id_from_event, i, i0, n;
      this.notebook.writable = false;
      this.notebook.container = $(this.options.container_selector);
      if (action === 1) {
        this.cells = [];
        n = this.notebook.ncells();
        i = 0;
        while (i < n) {
          this.notebook._unsafe_delete_cell(i);
          i += 1;
        }
      }
      i0 = this.cells.length;
      $(this.selector).add(this.options.not_executable_selector).each((function(_this) {
        return function(i, el) {
          var arr, autorun, cell, controls, hint, input, lang, langStr, message, original_id, outputbox, pretext, pretextbox, sct, solution, str, title, titlebox, wrap;
          i += i0;
          lang = $(el).data('lang');
          if (lang === 'single' || lang === 'multiple' || lang === 'blank') {
            cell = _this.notebook.insert_cell_at_bottom('code');
            title = $(el).find('div[data-type="title"]').text().trim();
            if (!title) {
              title = '测试题目';
            }
            cell.set_title(title);
            cell.set_solution($(el).find('div[data-type="solution"]').html());
            cell.set_hint($(el).find('div[data-type="hint"]').html());
            cell.set_lang(lang);
            langStr = cell.get_lang();
            input = $("<div class='amalthea_quiz' data-cell-id='" + i + "'></div>");
            if (lang === 'single') {
              sct = [0, 0, 0, 0];
              arr = [0, 1, 2, 3];
              _this.shuffle(arr);
              input.append("<div class='amalthea_quiz_info'>" + $(el).find('div[data-type="info"]').html() + "</div>");
              arr.forEach(function(num, idx) {
                var item;
                item = $(el).find('div[data-type="option"]').eq(num);
                if (item.data('correct')) {
                  sct[idx] = 1;
                }
                return input.append("<div class='amalthea_quiz_option' data-action='select'><span class='radio'></span><span>" + item.html() + "</span></div>");
              });
              cell.set_sct(sct);
            } else if (lang === 'multiple') {
              sct = [0, 0, 0, 0];
              arr = [0, 1, 2, 3];
              _this.shuffle(arr);
              input.append("<div class='amalthea_quiz_info'>" + $(el).find('div[data-type="info"]').html() + "</div>");
              arr.forEach(function(num, idx) {
                var item;
                item = $(el).find('div[data-type="option"]').eq(num);
                if (item.data('correct')) {
                  sct[idx] = 1;
                }
                return input.append("<div class='amalthea_quiz_option' data-action='check'><span class='checkbox'></span><span>" + item.html() + "</span></div>");
              });
              cell.set_sct(sct);
            } else if (lang === 'blank') {
              sct = [];
              str = $(el).find('div[data-type="string"]').html();
              str = str.replace(/%b/g, '<input type="text" class="amalthea_quiz_blank">');
              input.append("<div class='amalthea_quiz_info'>" + str + "</div>");
              $(el).find('div[data-type="blank"]').each(function(idx, item) {
                return sct.push($(item).text().trim().split(','));
              });
              cell.set_sct(sct);
            }
            wrap = $("<div class='amalthea_wrap' data-cell-id='" + i + "'></div>");
            if (title) {
              titlebox = $("<div class='amalthea_title' data-cell-id='" + i + "'></div>");
              titlebox.append("<div class='amalthea_title_controls' data-cell-id='" + i + "'><span class='code-type'>" + langStr.title + "</span><button data-action='reset' class='reset'>重置</button></div>");
              titlebox.append("<div class='amalthea_title_text'><span>" + title + "</span></div>");
              wrap.append(titlebox);
            }
            hint = $("<div class='amalthea_hint' data-cell-id='" + i + "' style='display:none'></div>");
            solution = $("<div class='amalthea_solution' data-cell-id='" + i + "' style='display:none'></div>");
            message = $(("<div class='amalthea_message' data-cell-id='" + i + "' style='display:none' onclick='{this.style.display=") + '"none"' + "}'></div>");
            if ($(el).is(_this.options.not_executable_selector)) {
              _this.not_execute[i] = true;
            } else {
              _this.not_execute[i] = false;
            }
            controls = $("<div class='amalthea_controls' data-cell-id='" + i + "'>" + (_this.controls_html_quiz(cell, i)) + "</div>");
            $(el).replaceWith(cell.element.empty().append(wrap));
            _this.cells.push(cell);
            $(wrap).append(input);
            $(wrap).append(hint);
            $(wrap).append(solution);
            $(wrap).append(message);
            $(wrap).append(controls);
            _this.notebook_el.hide();
            return;
          }
          cell = _this.notebook.insert_cell_at_bottom('code');
          original_id = $(el).attr('id');
          autorun = $(el).attr('autorun');
          title = $(el).find('code[data-type="title"]').text().trim();
          cell.set_title(title);
          pretext = $(el).find('code[data-type="pre-exercise-code"]').text().trim();
          cell.set_pretext(pretext);
          cell.set_samplecode($(el).find('code[data-type="sample-code"]').text().trim());
          cell.set_text($(el).find('code[data-type="sample-code"]').text().trim());
          cell.set_solution($(el).find('code[data-type="solution"]').text().trim());
          cell.set_sct($(el).find('code[data-type="sct"]').text().trim());
          cell.set_sct_method($(el).find('code[data-type="sct"]').data('method'));
          cell.set_hint($(el).find('code[data-type="hint"]').text().trim());
          cell.set_lang(lang);
          langStr = cell.get_lang();
          cell.force_highlight(langStr.mode);
          if ($(el).is(_this.options.read_only_selector)) {
            cell.read_only = true;
            cell.code_mirror.setOption("readOnly", true);
          }
          wrap = $("<div class='amalthea_wrap' data-cell-id='" + i + "'></div>");
          if ($(el).attr('data-not-executable') !== void 0) {
            wrap.addClass('not-executable');
          }
          if ($(el).attr('data-read-only') !== void 0) {
            wrap.addClass('read-only');
          }
          if (title) {
            titlebox = $("<div class='amalthea_title' data-cell-id='" + i + "'></div>");
            titlebox.append("<div class='amalthea_title_controls' data-cell-id='" + i + "'><span class='code-type'>" + langStr.title + "</span><button data-action='reset' class='reset'>重置</button><button data-action='copy' class='copy'>复制</button></div>");
            titlebox.append("<div class='amalthea_title_text'><span>" + title + "</span></div>");
            wrap.append(titlebox);
          }
          if (pretext) {
            pretextbox = $("<div class='amalthea_pretext' data-cell-id='" + i + "'></div>");
            wrap.append(pretextbox);
          }
          outputbox = $("<div class='amalthea_output' data-cell-id='" + i + "' style='display:none'></div>");
          outputbox.append($("<div class='amalthea_output_area'></div>"));
          hint = $("<div class='amalthea_hint' data-cell-id='" + i + "' style='display:none'></div>");
          solution = $("<div class='amalthea_solution' data-cell-id='" + i + "' style='display:none'></div>");
          message = $(("<div class='amalthea_message' data-cell-id='" + i + "' style='display:none' onclick='{this.style.display=") + '"none"' + "}'></div>");
          if ($(el).is(_this.options.not_executable_selector)) {
            _this.not_execute[i] = true;
          } else {
            _this.not_execute[i] = false;
          }
          controls = $("<div class='amalthea_controls' data-cell-id='" + i + "'>" + (_this.controls_html(cell, i)) + "</div>");
          wrap.append(cell.element.children());
          $(el).replaceWith(cell.element.empty().append(wrap));
          _this.cells.push(cell);
          if (!_this.server_error) {
            $(wrap).append(outputbox);
            $(wrap).append(hint);
            $(wrap).append(solution);
            $(wrap).append(message);
            $(wrap).append(controls);
          }
          if (original_id) {
            cell.element.attr('id', original_id);
          }
          cell.element.removeAttr('tabindex');
          cell.element.off('dblclick');
          cell.element.click();
          _this.typing[i] = false;
          if (autorun) {
            cell.set_text("");
            cell.read_only = true;
            cell.code_mirror.setOption("readOnly", true);
            _this.typing[i] = true;
            return setTimeout(function() {
              return _this.autorun(i);
            }, 600);
          }
        };
      })(this));
      this.notebook_el.hide();
      $('div.code_cell').off('keydown');
      $('div.code_cell').on('keydown', (function(_this) {
        return function(e) {
          var cell_id, focus_edit_flag, next;
          if (e.which === _this.options.next_cell_shortcut && e.shiftKey === true) {
            cell_id = get_cell_id_from_event(e);
            if (cell_id === _this.cells.length - 1) {
              cell_id = -1;
            }
            next = _this.cells[cell_id + 1];
            next.focus_editor();
            return false;
          } else if (e.which === _this.options.run_cell_shortcut && e.shiftKey === true) {
            cell_id = get_cell_id_from_event(e);
            _this.run_cell(cell_id);
            return false;
          } else if (focus_edit_flag) {
            cell_id = get_cell_id_from_event(e);
            _this.track('cell_edit', {
              cell_id: cell_id
            });
            focus_edit_flag = false;
          }
          return true;
        };
      })(this));
      if (!action) {
        focus_edit_flag = false;
        this.events.on('edit_mode.Cell', (function(_this) {
          return function(e, c) {
            return focus_edit_flag = true;
          };
        })(this));
        get_cell_id_from_event = function(e) {
          return $(e.currentTarget).find('.amalthea_controls').data('cell-id');
        };
        $(window).on('keydown', (function(_this) {
          return function(e) {
            if (e.which === 67 && e.ctrlKey) {
              return _this.kernel.interrupt();
            }
          };
        })(this));
        this.events.on('kernel_connected.Kernel', (function(_this) {
          return function() {
            var cell, id, k, len, ref, results1;
            if (_this.has_kernel_connected === '') {
              ref = _this.cells;
              results1 = [];
              for (id = k = 0, len = ref.length; k < len; id = ++k) {
                cell = ref[id];
                results1.push(_this.show_cell_state(_this.idle_state, id));
              }
              return results1;
            }
          };
        })(this));
        this.events.on('kernel_idle.Kernel', (function(_this) {
          return function() {
            _this.set_state(_this.idle_state);
            return $.doTimeout('amalthea_idle_state', 300, function() {
              var busy_ids, id, interrupt_ids, k, l, len, len1, ref;
              if (_this.state === _this.idle_state) {
                busy_ids = $(".amalthea_controls button[data-state='busy']").parent().map(function() {
                  return $(this).data('cell-id');
                });
                for (k = 0, len = busy_ids.length; k < len; k++) {
                  id = busy_ids[k];
                  _this.show_cell_state(_this.idle_state, id);
                }
                interrupt_ids = $(".amalthea_controls button[data-state='interrupt']").parent().map(function() {
                  return $(this).data('cell-id');
                });
                for (l = 0, len1 = interrupt_ids.length; l < len1; l++) {
                  id = interrupt_ids[l];
                  _this.cells[id]["output_area"].clear_output(false);
                }
                return false;
              } else if (ref = _this.state, indexOf.call(_this.error_states, ref) < 0) {
                return true;
              } else {
                return false;
              }
            });
          };
        })(this));
        this.events.on('kernel_busy.Kernel', (function(_this) {
          return function() {
            return _this.set_state(_this.busy_state);
          };
        })(this));
        this.events.on('kernel_reconnecting.Kernel', (function(_this) {
          return function(e, data) {
            var time;
            _this.log('Reconnect attempt #' + data.attempt);
            if (data.attempt < 1) {
              time = Math.pow(2, data.attempt);
              return _this.set_state(_this.disc_state, time);
            } else {
              return _this.set_state(_this.gaveup_state);
            }
          };
        })(this));
        return this.events.on('output_message.OutputArea', (function(_this) {
          return function(e, msg_type, msg, output_area) {
            var controls, id;
            controls = $(output_area.element).parents('.code_cell').find('.amalthea_controls');
            id = controls.data('cell-id');
            _this.log(msg);
            if (msg_type === 'error') {
              if (_this.cells[id].get_sct()) {
                _this.show_message(false, id);
              }
              _this.log('Error executing cell #' + id);
              _this.log(msg.content);
              if (msg.content.ename === "KeyboardInterrupt") {
                _this.log("KeyboardInterrupt by User");
                _this.show_cell_state(_this.interrupt_state, id);
              } else {
                _this.show_cell_state(_this.user_error, id);
              }
              return $(".amalthea_output[data-cell-id=" + id + "]").show().children().append('<pre>' + msg.content.ename + ':\n' + msg.content.evalue + '</pre>');
            } else if (msg_type === 'execute_result') {
              if (_this.cells[id].get_sct() && _this.cells[id].get_sct_method() === 0) {
                if (msg.content && (msg.content.data["text/plain"] === "True" || msg.content.data["text/plain"] === "true")) {
                  return _this.show_message(true, id);
                } else {
                  return _this.show_message(false, id);
                }
              } else {
                if (msg.content.data['image/png']) {
                  return $(".amalthea_output[data-cell-id=" + id + "]").show().children().append(msg.content.data['image/png']);
                } else if (msg.content.data['text/html']) {
                  return $(".amalthea_output[data-cell-id=" + id + "]").show().children().append(msg.content.data['text/html']);
                } else {
                  return $(".amalthea_output[data-cell-id=" + id + "]").show().children().append('<pre>' + msg.content.data['text/plain'] + '</pre>');
                }
              }
            } else if (msg_type === 'stream') {
              if (msg.content.name === 'stdout') {
                $(".amalthea_output[data-cell-id=" + id + "]").show().children().append('<pre>' + (new ansi_up["default"]).ansi_to_html(msg.content.text) + '</pre>');
                if (_this.cells[id].get_sct() && _this.cells[id].get_sct_method() === 1) {
                  if (msg.content.text.trim() === _this.cells[id].get_sct()) {
                    return _this.show_message(true, id);
                  } else {
                    return _this.show_message(false, id);
                  }
                }
              }
            } else if (msg_type === 'display_data') {
              if (msg.content.data['image/png']) {
                return $(".amalthea_output[data-cell-id=" + id + "]").show().children().append('<img src="data:image/png;base64,' + msg.content.data['image/png'] + '">');
              } else if (msg.content.data['text/html']) {
                return $(".amalthea_output[data-cell-id=" + id + "]").show().children().append(msg.content.data['text/html']);
              }
            }
          };
        })(this));
      }
    };

    Amalthea.prototype.autorun = function(id) {
      var cell, start, str;
      if (this.typing[id] !== true) {
        return;
      }
      cell = this.cells[id];
      start = cell.get_text().length;
      str = cell.get_samplecode();
      if (start < str.length) {
        start += parseInt(str.length / 16);
        cell.set_text(str.slice(0, start));
        return setTimeout((function(_this) {
          return function() {
            return _this.autorun(id);
          };
        })(this), Math.random() * 100 + 100);
      } else if (start > 0) {
        this.typing[id] = false;
        this.run_cell(id);
        cell.read_only = false;
        cell.code_mirror.setOption("readOnly", false);
        return $(".amalthea_wrap[data-cell-id=" + id + "]").removeClass('read-only');
      }
    };

    Amalthea.prototype.set_state = function(state1, reconnect_time) {
      var html, ref;
      this.state = state1;
      if (reconnect_time == null) {
        reconnect_time = '';
      }
      this.log('Amalthea: ' + this.state);
      if (ref = this.state, indexOf.call(this.error_states, ref) >= 0) {
        html = this.ui[this.state];
        $(".amalthea_controls").each((function(_this) {
          return function(i, el) {
            return $(el).html(_this.controls_html(_this.cells[$(el).data('cell-id')], $(el).data('cell-id'), _this.state, html));
          };
        })(this));
        if (this.state === this.disc_state) {
          return $(".amalthea_controls button").prop('disabled', true);
        }
      }
    };

    Amalthea.prototype.show_cell_state = function(state, cell_id) {
      this.set_state(state);
      this.log('show cell state: ' + state + ' for ' + cell_id);
      if (this.cells[cell_id]['last_msg_id'] && state === this.idle_state) {
        state = this.ran_state;
      }
      return $(".amalthea_controls[data-cell-id=" + cell_id + "]").html(this.controls_html(this.cells[cell_id], cell_id, state));
    };

    Amalthea.prototype.controls_html = function(cell, cell_id, state, html) {
      var result;
      if (cell == null) {
        cell = void 0;
      }
      if (cell_id == null) {
        cell_id = 0;
      }
      if (state == null) {
        state = this.idle_state;
      }
      if (html == null) {
        html = false;
      }
      if (this.not_execute[cell_id]) {
        return "";
      }
      if (!html) {
        html = this.ui[state];
      }
      result = "<button data-action='run' data-state='" + state + "'>" + html + "</button>";
      if (this.options.add_interrupt_button && state === this.busy_state) {
        result += "<button data-action='interrupt'>中断</button>";
      }
      if (state === this.user_error) {
        result += this.ui["error_addendum"];
      }
      if (cell && cell.get_hint() && !cell.showHint && !cell.showSolution) {
        result += "<button data-action='showhint' class='hint'>显示提示</button>";
      } else if (cell && cell.get_hint() && cell.showHint && !cell.showSolution) {
        result += "<button data-action='showhint' class='solution'>显示答案</button>";
      } else if (cell && cell.get_hint() && cell.showSolution) {
        result += "<button data-action='showhint' class='solution'>隐藏答案</button>";
      }
      result += '<a href="https://amalthea.ai" target="_blank"><div class="poweredby-amalthea"></div></a>';
      return result;
    };

    Amalthea.prototype.controls_html_quiz = function(cell, cell_id, state, html) {
      var result;
      if (cell == null) {
        cell = void 0;
      }
      if (cell_id == null) {
        cell_id = 0;
      }
      if (state == null) {
        state = this.idle_state;
      }
      if (html == null) {
        html = false;
      }
      if (this.not_execute[cell_id]) {
        return "";
      }
      if (!html) {
        html = this.ui[state];
      }
      result = "<button data-action='run'>提交答案</button>";
      if (cell && cell.get_hint() && !cell.showHint && !cell.showSolution) {
        result += "<button data-action='showhint' class='hint'>显示提示</button>";
      } else if (cell && cell.get_hint() && cell.showHint && !cell.showSolution) {
        result += "<button data-action='showhint' class='solution'>显示答案</button>";
      } else if (cell && cell.get_hint() && cell.showSolution) {
        result += "<button data-action='showhint' class='solution'>隐藏答案</button>";
      }
      result += '<a href="#" target="_blank"><div class="poweredby-amalthea"></div></a>';
      return result;
    };

    Amalthea.prototype.get_controls_html = function(cell) {
      return $(cell.element).find(".amalthea_controls").html();
    };

    Amalthea.prototype.kernel_controls_html = function() {
      return "<button data-action='run-above'>全部运行</button> <button data-action='interrupt'>中断</button> <button data-action='restart'>重新运行</button>";
    };

    Amalthea.prototype.run_cell = function(cell_id, end_id) {
      var cell, correct, i, items, k, lang, len, ref, ref1, ref2, results1, sct;
      if (end_id == null) {
        end_id = false;
      }
      lang = this.cells[cell_id].get_lang().lang;
      if (lang === 'single' || lang === 'multiple' || lang === 'blank') {
        if (lang === 'single' || lang === 'multiple') {
          if (!$(".amalthea_quiz[data-cell-id=" + cell_id + "]").find('.amalthea_quiz_option.selected').length) {
            return;
          }
          sct = this.cells[cell_id].get_sct();
          items = $(".amalthea_quiz[data-cell-id=" + cell_id + "]").find('.amalthea_quiz_option');
          correct = true;
          items.removeClass('right').removeClass('wrong');
          sct.forEach((function(_this) {
            return function(node, idx) {
              if (items.eq(idx).hasClass('selected') && !node) {
                return correct = false;
              } else if (!items.eq(idx).hasClass('selected') && node) {
                return correct = false;
              }
            };
          })(this));
          this.show_message(correct, cell_id);
        } else {
          sct = this.cells[cell_id].get_sct();
          correct = true;
          items = $(".amalthea_quiz[data-cell-id=" + cell_id + "]").find('.amalthea_quiz_blank');
          items.each((function(_this) {
            return function(idx, node) {
              if (!sct[idx].includes($(node).val().trim())) {
                return correct = false;
              }
            };
          })(this));
          this.show_message(correct, cell_id);
        }
        return;
      }
      if (this.typing[cell_id]) {
        return;
      }
      if ($(".amalthea_output[data-cell-id=" + cell_id + "]").parent().find('.CodeMirror-line').text() === "") {
        return;
      }
      $(".amalthea_output[data-cell-id=" + cell_id + "]").hide().children().html('');
      $(".amalthea_message[data-cell-id=" + cell_id + "]").hide();
      this.track('run_cell', {
        cell_id: cell_id,
        end_id: end_id
      });
      if ((ref = this.state) === this.gaveup_state || ref === this.cant_state) {
        this.log('Lets reconnect amalthea to the server');
        this.has_kernel_connected = '';
        this.url = '';
      } else if (ref1 = this.state, indexOf.call(this.error_states.concat(this.start_state), ref1) >= 0) {
        this.log('Not attempting to reconnect amalthea to server, state: ' + this.state);
        return;
      }
      cell = this.cells[cell_id];
      if (!this.get_controls_html(cell)) {
        return;
      }
      if (!this.has_kernel_connected) {
        this.show_cell_state(this.start_state, cell_id);
        return this.before_first_run(cell, (function(_this) {
          return function() {
            var i, k, len, ref2, results1;
            _this.show_cell_state(_this.busy_state, cell_id);
            cell.execute(true);
            if (end_id) {
              ref2 = _this.cells.slice(cell_id + 1, +end_id + 1 || 9e9);
              results1 = [];
              for (i = k = 0, len = ref2.length; k < len; i = ++k) {
                cell = ref2[i];
                if (!_this.get_controls_html(cell)) {
                  continue;
                }
                _this.show_cell_state(_this.busy_state, i + 1);
                results1.push(cell.execute(true));
              }
              return results1;
            }
          };
        })(this));
      } else if (this.kernel.name !== cell.get_lang().kernel) {
        this.log("Turn to kernel " + cell.get_lang().kernel);
        this.show_cell_state(this.start_state, cell_id);
        this.kernel.kill();
        this.has_kernel_connected = false;
        return this.before_first_run(cell, (function(_this) {
          return function() {
            var i, k, len, ref2, results1;
            _this.show_cell_state(_this.busy_state, cell_id);
            cell.execute(true);
            if (end_id) {
              ref2 = _this.cells.slice(cell_id + 1, +end_id + 1 || 9e9);
              results1 = [];
              for (i = k = 0, len = ref2.length; k < len; i = ++k) {
                cell = ref2[i];
                if (!_this.get_controls_html(cell)) {
                  continue;
                }
                _this.show_cell_state(_this.busy_state, i + 1);
                results1.push(cell.execute(true));
              }
              return results1;
            }
          };
        })(this));
      } else {
        this.show_cell_state(this.busy_state, cell_id);
        cell.execute(true);
        if (end_id) {
          ref2 = this.cells.slice(cell_id + 1, +end_id + 1 || 9e9);
          results1 = [];
          for (i = k = 0, len = ref2.length; k < len; i = ++k) {
            cell = ref2[i];
            if (!this.get_controls_html(cell)) {
              continue;
            }
            this.show_cell_state(this.busy_state, i + 1);
            results1.push(cell.execute(true));
          }
          return results1;
        }
      }
    };

    Amalthea.prototype.show_message = function(b, id) {
      var event;
      $(".amalthea_message[data-cell-id=" + id + "]").hide();
      if (b) {
        $(".amalthea_message[data-cell-id=" + id + "]").text("答案通过！").removeClass("message_wrong").addClass("message_right");
        if (this.handler) {
          event = new CustomEvent("amalthea.checked", {
            'detail': {
              'result': 'right',
              'id': id
            }
          });
          this.handler.node.dispatchEvent(event);
        }
      } else {
        $(".amalthea_message[data-cell-id=" + id + "]").text("答案未通过！").removeClass("message_right").addClass("message_wrong");
        if (this.handler) {
          event = new CustomEvent("amalthea.checked", {
            'detail': {
              'result': 'wrong',
              'id': id
            }
          });
          this.handler.node.dispatchEvent(event);
        }
      }
      return setTimeout((function(_this) {
        return function() {
          return $(".amalthea_message[data-cell-id=" + id + "]").show();
        };
      })(this), 100);
    };

    Amalthea.prototype.before_first_run = function(cell, cb) {
      var kernel_controls;
      if (this.url) {
        this.start_kernel(cell, cb);
      } else {
        this.call_spawn(cell, cb);
      }
      if (this.options.append_kernel_controls_to && !$('.kernel_controls').length) {
        kernel_controls = $("<div class='kernel_controls'></div>");
        return kernel_controls.html(this.kernel_controls_html()).appendTo(this.options.append_kernel_controls_to);
      }
    };

    Amalthea.prototype.setup_user_events = function() {
      return $('body').on('click', 'div.amalthea_controls button, div.kernel_controls button, div.amalthea_title_controls button, .amalthea_quiz_option', (function(_this) {
        return function(e) {
          var action, button, id;
          e.preventDefault();
          button = $(e.currentTarget);
          id = button.parent().data('cell-id');
          action = button.data('action');
          if (e.shiftKey) {
            action = 'shift-' + action;
          }
          switch (action) {
            case 'run':
              return _this.run_cell(id);
            case 'shift-run':
            case 'run-above':
              if (!id) {
                id = _this.cells.length;
              }
              _this.log('exec from top to cell #' + id);
              return _this.run_cell(0, id);
            case 'interrupt':
              return _this.kernel.interrupt();
            case 'restart':
              if (confirm('Are you sure you want to restart the kernel? Your work will be lost.')) {
                return _this.kernel.restart();
              }
              break;
            case 'showhint':
              return _this.showhint(id, button);
            case 'reset':
              return _this.resetcode(id, button);
            case 'copy':
              return _this.copycode(id, button);
            case 'select':
              button.parent().find('.amalthea_quiz_option').removeClass('selected');
              return button.addClass('selected');
            case 'check':
              if (button.hasClass('selected')) {
                return button.removeClass('selected');
              } else {
                return button.addClass('selected');
              }
          }
        };
      })(this));
    };

    Amalthea.prototype.showhint = function(cell_id, e) {
      var cell, ele;
      cell = this.cells[cell_id];
      if (!cell.showHint && !cell.showSolution) {
        ele = $('.amalthea_hint[data-cell-id="' + cell_id + '"]');
        ele.html('<div class="amalthea_hint_area"><div>' + cell.get_hint() + '</div></div>');
        ele.css("display", "block");
        cell.showHint = true;
        e.html("显示答案");
        e.removeClass("hint");
        return e.addClass("solution");
      } else if (cell.showHint && !cell.showSolution) {
        ele = $('.amalthea_hint[data-cell-id="' + cell_id + '"]');
        ele.html('');
        ele.css("display", "none");
        ele = $('.amalthea_solution[data-cell-id="' + cell_id + '"]');
        ele.html('<div class="amalthea_solution_area"><pre>' + cell.get_solution() + '</pre></div>');
        ele.css("display", "block");
        cell.showHint = false;
        cell.showSolution = true;
        return e.html("隐藏答案");
      } else {
        ele = $('.amalthea_solution[data-cell-id="' + cell_id + '"]');
        ele.html('');
        ele.css("display", "none");
        cell.showSolution = false;
        e.html("显示提示");
        e.removeClass("solution");
        return e.addClass("hint");
      }
    };

    Amalthea.prototype.resetcode = function(cell_id, button) {
      var cell;
      cell = this.cells[cell_id];
      if (cell.get_lang().lang === 'single' || cell.get_lang().lang === 'multiple' || cell.get_lang().lang === 'blank') {
        $('.amalthea_quiz[data-cell-id="' + cell_id + '"]').find('input').val('');
        $('.amalthea_quiz[data-cell-id="' + cell_id + '"]').find('.amalthea_quiz_option').removeClass('selected');
        $('.amalthea_message[data-cell-id="' + cell_id + '"]').hide();
        return;
      }
      if (cell.reset_text) {
        return cell.reset_text();
      }
    };

    Amalthea.prototype.copycode = function(cell_id, button) {
      var cell, node;
      cell = this.cells[cell_id];
      node = $("<textarea></textarea>").css('position', 'absolute').css('opacity', '0').val(cell.get_text()).appendTo($('body')).select();
      document.execCommand("copy");
      node.remove();
      cell.focus();
      return cell.select_all();
    };

    Amalthea.prototype.start_kernel = function(cell, cb) {
      var kernel_name;
      this.log('start_kernel with ' + this.url);
      kernel_name = cell.get_lang().kernel;
      this.kernel = new kernel.Kernel(this.url + 'api/kernels', '', this.notebook, kernel_name);
      this.kernel.name = kernel_name;
      this.kernel.start();
      this.notebook.kernel = this.kernel;
      this.events.off('kernel_ready.Kernel');
      return this.events.on('kernel_ready.Kernel', (function(_this) {
        return function() {
          var i, k, len, n_cell, ref;
          _this.has_kernel_connected = true;
          _this.log('kernel ready');
          ref = _this.cells;
          for (i = k = 0, len = ref.length; k < len; i = ++k) {
            n_cell = ref[i];
            if (n_cell.get_lang().kernel === kernel_name) {
              n_cell.set_kernel(_this.kernel);
            }
          }
          return cb();
        };
      })(this));
    };

    Amalthea.prototype.start_notebook = function() {
      var common_options, config_section, keyboard_manager, save_widget;
      contents = {
        list_checkpoints: function() {
          return new Promise(function(resolve, reject) {
            return resolve({});
          });
        }
      };
      keyboard_manager = {
        edit_mode: function() {},
        command_mode: function() {},
        register_events: function() {},
        enable: function() {},
        disable: function() {}
      };
      keyboard_manager.edit_shortcuts = {
        handles: function() {}
      };
      save_widget = {
        update_document_title: function() {},
        contents: function() {}
      };
      config_section = {
        data: {
          data: {}
        }
      };
      common_options = {
        ws_url: '',
        base_url: '',
        notebook_path: '',
        notebook_name: ''
      };
      this.notebook_el = $('<div id="notebook"></div>').prependTo(this.options.container_selector);
      this.notebook = new notebook.Notebook('div#notebook', $.extend({
        events: this.events,
        keyboard_manager: keyboard_manager,
        save_widget: save_widget,
        contents: contents,
        config: config_section,
        codemirror_theme_name: this.options.codemirror_theme_name
      }, common_options));
      this.notebook.kernel_selector = {
        set_kernel: function() {}
      };
      this.events.trigger('app_initialized.NotebookApp');
      this.notebook.load_notebook(common_options.notebook_path, this.options.codemirror_mode_name);
      IPython.notebook = this.notebook;
      return this.build_amalthea();
    };

    Amalthea.prototype.destroy = function() {
      if (this.kernel) {
        return this.kernel.interrupt();
      }
    };

    Amalthea.prototype.shuffle = function(a) {
      var i, j, x;
      j = void 0;
      x = void 0;
      i = void 0;
      i = a.length;
      while (i) {
        j = Math.floor(Math.random() * i);
        x = a[i - 1];
        a[i - 1] = a[j];
        a[j] = x;
        i--;
      }
    };

    Amalthea.prototype.get_param_from_qs = function(name) {
      var regex, results;
      name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
      regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
      results = regex.exec(location.search);
      if (results === null) {
        return '';
      } else {
        return decodeURIComponent(results[1].replace(/\+/g, ' '));
      }
    };

    Amalthea.prototype.log = function(m, serious) {
      if (serious == null) {
        serious = false;
      }
      if (this.debug) {
        if (!serious) {
          return console.log(m);
        } else {
          return console.log("%c" + m, "color: blue; font-size: 12px");
        }
      } else if (serious) {
        return console.log(m);
      }
    };

    Amalthea.prototype.track = function(name, data) {
      if (data == null) {
        data = {};
      }
      data['name'] = name;
      if (this.server_error) {
        data['server_error'] = true;
      }
      if (this.has_kernel_connected) {
        data['has_kernel_connected'] = true;
      }
      return $(window.document).trigger('amalthea_tracking_event', data);
    };

    return Amalthea;

  })();
  window.Amalthea = Amalthea;
  return {
    Amalthea: Amalthea
  };
});
